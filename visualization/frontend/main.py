import streamlit as st
import requests
from st_link_analysis import st_link_analysis, NodeStyle, EdgeStyle
from pydantic import BaseModel
from typing import Optional

st.set_page_config(page_title="CoSE-—Ä–∞—Å–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∞", layout="wide")
st.title("üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è CoSE-—Ä–∞—Å–∫–ª–∞–¥–∫–∏ Cytoscape.js")

# –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏
class FunctionAnalysisRequest(BaseModel):
    file_path: str
    start_line: int
    end_line: int

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑
def analyze_function(file_path: str, start_line: int, end_line: int) -> Optional[str]:
    try:
        response = requests.post(
            "http://localhost:8000/git-analysis/analyze-function",
            json={
                "file_path": file_path,
                "start_line": start_line,
                "end_line": end_line
            }
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        return None

# –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
example_elements = {
    "nodes": [{"data": {"id": x, "label": f"Node {x}"}} for x in range(1, 7)],
    "edges": [
        {"data": {"source": u, "target": v, "label": f"{u}->{v}"}}
        for u in map(str, range(1, 7))
        for v in map(str, range(1, 7))
        if u != v
    ],
}

# –°—Ç–∏–ª–∏ —É–∑–ª–æ–≤
node_styles = [
    NodeStyle(f"Node {i}", color, "label")
    for i, color in enumerate(
        ["#FF7F3E", "#2A629A", "#20A39E", "#D81159", "#8F2D56", "#218380"], 1
    )
]

# –°—Ç–∏–ª–∏ —Ä—ë–±–µ—Ä
edge_styles = [
    EdgeStyle(f"{u}->{v}", caption="label", directed=True)
    for u in map(str, range(1, 7))
    for v in map(str, range(1, 7))
    if u != v
]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã CoSE-Bilkent –º–∞–∫–µ—Ç–∞
cose_layout = {
    "name": "cose",  # –∏–ª–∏ 'cose-bilkent'
    "idealEdgeLength": 100,
    "nodeRepulsion": 4500,
    "edgeElasticity": 0.45,
    "nestingFactor": 0.1,
    "gravity": 0.25,
    "numIter": 2500,
    "animate": True,
    "animationDuration": 1000,
    "randomize": False,
    "componentSpacing": 40,
}

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏
st.sidebar.title("–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏")
selected_file = st.sidebar.text_input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É")
start_line = st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞", min_value=1, value=1)
end_line = st.sidebar.number_input("–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞", min_value=1, value=1)

if st.sidebar.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é"):
    if selected_file and start_line and end_line:
        result = analyze_function(selected_file, start_line, end_line)
        if result:
            st.sidebar.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            st.sidebar.json(result)
    else:
        st.sidebar.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
st_link_analysis(
    example_elements,
    layout=cose_layout,
    node_styles=node_styles,
    edge_styles=edge_styles,
)
